<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bin\multi_boot.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bin\multi_boot.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Thu Jan 12 15:03:08 2017
<BR><P>
<H3>Maximum Stack Usage =        368 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; am_bootloader_image_check &rArr; am_bootloader_boot_from_storage &rArr; image_load_from_external_flash &rArr; am_devices_spiflash_read &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">am_nmi_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">am_nmi_isr</a><BR>
 <LI><a href="#[4]">am_fault_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">am_fault_isr</a><BR>
 <LI><a href="#[5]">am_mpufault_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">am_mpufault_isr</a><BR>
 <LI><a href="#[6]">am_busfault_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">am_busfault_isr</a><BR>
 <LI><a href="#[7]">am_usagefault_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">am_usagefault_isr</a><BR>
 <LI><a href="#[14]">am_adc_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">am_adc_isr</a><BR>
 <LI><a href="#[2d]">am_util_delay_cycles</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">am_util_delay_cycles</a><BR>
 <LI><a href="#[54]">am_hal_debug_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[54]">am_hal_debug_error</a><BR>
 <LI><a href="#[1b]">am_memmanage_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">am_memmanage_isr</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">Reset_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1a]">__main</a> from __main.o(!!!main) referenced from startup_keil.o(RESET)
 <LI><a href="#[14]">am_adc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[c]">am_brownout_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[6]">am_busfault_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[e]">am_clkgen_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[16]">am_ctimer_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[9]">am_debugmon_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4]">am_fault_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[15]">am_gpio_isr</a> from multi_boot.o(i.am_gpio_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[19]">am_hal_iom_sleeping_queue_flush</a> from am_hal_iom.o(i.am_hal_iom_sleeping_queue_flush) referenced from am_hal_iom.o(.data)
 <LI><a href="#[12]">am_iomaster0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[13]">am_iomaster1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[11]">am_ioslave_acc_isr</a> from ios_boot_handlers.o(i.am_ioslave_acc_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[10]">am_ioslave_ios_isr</a> from ios_boot_handlers.o(i.am_ioslave_ios_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[5]">am_mpufault_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3]">am_nmi_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[a]">am_pendsv_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[8]">am_svcall_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[b]">am_systick_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[17]">am_uart_isr</a> from uart_boot_handlers.o(i.am_uart_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[7]">am_usagefault_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[f]">am_vcomp_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[d]">am_watchdog_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>am_nmi_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_nmi_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_nmi_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>am_fault_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_fault_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_fault_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>am_memmanage_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET), UNUSED, KEPT)
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_memmanage_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_memmanage_isr
</UL>

<P><STRONG><a name="[5]"></a>am_mpufault_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpufault_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_mpufault_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>am_busfault_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_busfault_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_busfault_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>am_usagefault_isr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_usagefault_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_usagefault_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>am_adc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>am_brownout_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>am_clkgen_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>am_ctimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>am_debugmon_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>am_iomaster0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>am_iomaster1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>am_pendsv_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>am_svcall_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>am_systick_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>am_vcomp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>am_watchdog_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[7d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[7e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1f]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[7f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[25]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[20]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[80]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[81]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[82]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[83]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[84]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[85]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[86]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[87]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[88]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[89]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[90]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[91]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[92]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[93]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[94]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[95]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[96]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[97]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[98]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[99]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[9a]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[9b]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[22]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[24]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[9c]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[26]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; am_bootloader_image_check &rArr; am_bootloader_boot_from_storage &rArr; image_load_from_external_flash &rArr; am_devices_spiflash_read &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[9d]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[30]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[29]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[9e]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[2b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[2d]"></a>am_util_delay_cycles</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_util_delay.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_cycles
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
</UL>

<P><STRONG><a name="[6c]"></a>am_bootloader_image_run</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am_bootloader.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>am_hal_interrupt_master_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>am_hal_interrupt_master_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flag_page_update
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_internal_flash
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_sleeping_queue_flush
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[43]"></a>am_hal_interrupt_master_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flag_page_update
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_internal_flash
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_sleeping_queue_flush
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[2f]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_internal_flash
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[a4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[23]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[28]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a5]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a6]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[a7]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[31]"></a>am_bootloader_boot_from_storage</STRONG> (Thumb, 276 bytes, Stack size 80 bytes, am_bootloader.o(i.am_bootloader_boot_from_storage))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = am_bootloader_boot_from_storage &rArr; image_load_from_external_flash &rArr; am_devices_spiflash_read &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_config
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_new_image_check
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_fast_crc32
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_spiflash_init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_partial_crc32
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flag_page_update
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_disable
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_spiflash_read
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_iom_spi_pins_enable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_iom_spi_pins_disable
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_internal_flash
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spiflash_pins
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_image_check
</UL>

<P><STRONG><a name="[34]"></a>am_bootloader_fast_crc32</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, am_bootloader.o(i.am_bootloader_fast_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_bootloader_fast_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_new_image_check
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flash_check
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>

<P><STRONG><a name="[3f]"></a>am_bootloader_flag_page_update</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, am_bootloader.o(i.am_bootloader_flag_page_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_bootloader_flag_page_update
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_program_main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_acc_isr
</UL>

<P><STRONG><a name="[44]"></a>am_bootloader_flash_check</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, am_bootloader.o(i.am_bootloader_flash_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am_bootloader_flash_check &rArr; am_bootloader_fast_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_fast_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_image_check
</UL>

<P><STRONG><a name="[45]"></a>am_bootloader_image_check</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, am_bootloader.o(i.am_bootloader_image_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = am_bootloader_image_check &rArr; am_bootloader_boot_from_storage &rArr; image_load_from_external_flash &rArr; am_devices_spiflash_read &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flash_check
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>am_bootloader_new_image_check</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, am_bootloader.o(i.am_bootloader_new_image_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = am_bootloader_new_image_check &rArr; am_bootloader_fast_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_fast_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>

<P><STRONG><a name="[3b]"></a>am_bootloader_partial_crc32</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, am_bootloader.o(i.am_bootloader_partial_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = am_bootloader_partial_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
</UL>

<P><STRONG><a name="[3c]"></a>am_bsp_iom_spi_pins_disable</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, am_bsp.o(i.am_bsp_iom_spi_pins_disable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
</UL>

<P><STRONG><a name="[38]"></a>am_bsp_iom_spi_pins_enable</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, am_bsp.o(i.am_bsp_iom_spi_pins_enable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure_spiflash_pins
</UL>

<P><STRONG><a name="[46]"></a>am_bsp_low_power_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, am_bsp.o(i.am_bsp_low_power_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_bsp_low_power_init
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_vcomp_disable
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_select
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_rtc_osc_disable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_bucks_enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_bandgap_disable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_osc_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>am_devices_spiflash_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_devices_spiflash.o(i.am_devices_spiflash_init))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>

<P><STRONG><a name="[3a]"></a>am_devices_spiflash_read</STRONG> (Thumb, 150 bytes, Stack size 120 bytes, am_devices_spiflash.o(i.am_devices_spiflash_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = am_devices_spiflash_read &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
</UL>

<P><STRONG><a name="[15]"></a>am_gpio_isr</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, multi_boot.o(i.am_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = am_gpio_isr &rArr; setup_serial &rArr; am_hal_uart_config
</UL>
<BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_char_transmit_polled
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_count
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_disable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>am_hal_clkgen_osc_stop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_osc_stop))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[5c]"></a>am_hal_clkgen_sysclk_get</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_sysclk_get))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_config
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
</UL>

<P><STRONG><a name="[6d]"></a>am_hal_clkgen_sysclk_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_sysclk_select))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>am_hal_debug_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, am_hal_debug.o(i.am_hal_debug_error))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_write
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>

<P><STRONG><a name="[41]"></a>am_hal_flash_page_erase</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_flash.o(i.am_hal_flash_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flag_page_update
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_internal_flash
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
</UL>

<P><STRONG><a name="[42]"></a>am_hal_flash_program_main</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_hal_flash.o(i.am_hal_flash_program_main))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flag_page_update
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_internal_flash
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
</UL>

<P><STRONG><a name="[51]"></a>am_hal_gpio_int_clear</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[50]"></a>am_hal_gpio_int_disable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_int_disable))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[73]"></a>am_hal_gpio_int_enable</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>am_hal_interrupt_enable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, am_hal_interrupt.o(i.am_hal_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ios_interface
</UL>

<P><STRONG><a name="[35]"></a>am_hal_iom_config</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, am_hal_iom.o(i.am_hal_iom_config))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>

<P><STRONG><a name="[3d]"></a>am_hal_iom_disable</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, am_hal_iom.o(i.am_hal_iom_disable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
</UL>

<P><STRONG><a name="[39]"></a>am_hal_iom_enable</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, am_hal_iom.o(i.am_hal_iom_enable))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_load_from_external_flash
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[55]"></a>am_hal_iom_fifo_read</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, am_hal_iom.o(i.am_hal_iom_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_iom_fifo_read
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
</UL>

<P><STRONG><a name="[56]"></a>am_hal_iom_fifo_write</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, am_hal_iom.o(i.am_hal_iom_fifo_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
</UL>

<P><STRONG><a name="[57]"></a>am_hal_iom_queue_spi_read</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, am_hal_iom.o(i.am_hal_iom_queue_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = am_hal_iom_queue_spi_read &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_read
</UL>

<P><STRONG><a name="[19]"></a>am_hal_iom_sleeping_queue_flush</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, am_hal_iom.o(i.am_hal_iom_sleeping_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_iom_sleeping_queue_flush
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_sysctrl_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> am_hal_iom.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>am_hal_iom_spi_read</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, am_hal_iom.o(i.am_hal_iom_spi_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = am_hal_iom_spi_read &rArr; am_hal_iom_queue_spi_read &rArr; am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_read
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_spiflash_read
</UL>

<P><STRONG><a name="[4d]"></a>am_hal_iom_spi_write</STRONG> (Thumb, 322 bytes, Stack size 72 bytes, am_hal_iom.o(i.am_hal_iom_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write_nb
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_spiflash_read
</UL>

<P><STRONG><a name="[5a]"></a>am_hal_iom_spi_write_nb</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, am_hal_iom.o(i.am_hal_iom_spi_write_nb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_fifo_write
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
</UL>

<P><STRONG><a name="[5e]"></a>am_hal_ios_access_int_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_hal_ios.o(i.am_hal_ios_access_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ios_interface
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_acc_isr
</UL>

<P><STRONG><a name="[76]"></a>am_hal_ios_access_int_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_ios.o(i.am_hal_ios_access_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ios_interface
</UL>

<P><STRONG><a name="[5d]"></a>am_hal_ios_access_int_status_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am_hal_ios.o(i.am_hal_ios_access_int_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_acc_isr
</UL>

<P><STRONG><a name="[75]"></a>am_hal_ios_config</STRONG> (Thumb, 136 bytes, Stack size 4 bytes, am_hal_ios.o(i.am_hal_ios_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_ios_config
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ios_interface
</UL>

<P><STRONG><a name="[64]"></a>am_hal_ios_fifo_service</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, am_hal_ios.o(i.am_hal_ios_fifo_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_ios_fifo_service
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_ios_isr
</UL>

<P><STRONG><a name="[63]"></a>am_hal_ios_int_clear</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_hal_ios.o(i.am_hal_ios_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ios_interface
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_ios_isr
</UL>

<P><STRONG><a name="[77]"></a>am_hal_ios_int_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_ios.o(i.am_hal_ios_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ios_interface
</UL>

<P><STRONG><a name="[62]"></a>am_hal_ios_int_status_get</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, am_hal_ios.o(i.am_hal_ios_int_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_ios_isr
</UL>

<P><STRONG><a name="[4c]"></a>am_hal_mcuctrl_bandgap_disable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_bandgap_disable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[47]"></a>am_hal_mcuctrl_bucks_enable</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_bucks_enable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[58]"></a>am_hal_queue_item_add</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, am_hal_queue.o(i.am_hal_queue_item_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_write
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_queue_spi_read
</UL>

<P><STRONG><a name="[61]"></a>am_hal_reset_poi</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_hal_reset.o(i.am_hal_reset_poi))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_acc_isr
</UL>

<P><STRONG><a name="[4b]"></a>am_hal_rtc_osc_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_disable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[49]"></a>am_hal_rtc_osc_select</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, am_hal_rtc.o(i.am_hal_rtc_osc_select))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[59]"></a>am_hal_sysctrl_sleep</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, am_hal_sysctrl.o(i.am_hal_sysctrl_sleep))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_sleeping_queue_flush
</UL>

<P><STRONG><a name="[4f]"></a>am_hal_systick_count</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_hal_systick_count))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[6e]"></a>am_hal_systick_load</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_hal_systick_load))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>am_hal_systick_start</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_systick.o(i.am_hal_systick_start))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>am_hal_uart_char_transmit_polled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_char_transmit_polled))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[78]"></a>am_hal_uart_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
</UL>

<P><STRONG><a name="[5b]"></a>am_hal_uart_config</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, am_hal_uart.o(i.am_hal_uart_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_uart_config
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_get
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
</UL>

<P><STRONG><a name="[79]"></a>am_hal_uart_disable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_disable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
</UL>

<P><STRONG><a name="[7b]"></a>am_hal_uart_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
</UL>

<P><STRONG><a name="[7a]"></a>am_hal_uart_fifo_config</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
</UL>

<P><STRONG><a name="[66]"></a>am_hal_uart_int_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_int_clear))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
</UL>

<P><STRONG><a name="[7c]"></a>am_hal_uart_int_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_int_enable))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_serial
</UL>

<P><STRONG><a name="[65]"></a>am_hal_uart_int_status_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_int_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[48]"></a>am_hal_vcomp_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_vcomp.o(i.am_hal_vcomp_disable))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
</UL>

<P><STRONG><a name="[11]"></a>am_ioslave_acc_isr</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, ios_boot_handlers.o(i.am_ioslave_acc_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = am_ioslave_acc_isr &rArr; image_data_packet_read &rArr; am_bootloader_partial_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_reset_poi
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_access_int_status_get
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_access_int_clear
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flag_page_update
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_start_packet_read
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>am_ioslave_ios_isr</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, ios_boot_handlers.o(i.am_ioslave_ios_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = am_ioslave_ios_isr &rArr; am_hal_ios_fifo_service
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_int_status_get
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_int_clear
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_fifo_service
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>am_uart_isr</STRONG> (Thumb, 488 bytes, Stack size 32 bytes, uart_boot_handlers.o(i.am_uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = am_uart_isr &rArr; image_data_packet_read &rArr; am_bootloader_partial_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_status_get
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_clear
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ser_out
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_start_packet_read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;image_data_packet_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_reset_poi
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_flag_page_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>am_util_delay_ms</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, am_util_delay.o(i.am_util_delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_util_delay_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_get
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_cycles
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>cleanup_ios_interface</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, ios_boot_handlers.o(i.cleanup_ios_interface))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[36]"></a>configure_spiflash_pins</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, image_boot_handlers.o(i.configure_spiflash_pins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = configure_spiflash_pins
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_iom_spi_pins_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>

<P><STRONG><a name="[3e]"></a>image_load_from_external_flash</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, image_boot_handlers.o(i.image_load_from_external_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = image_load_from_external_flash &rArr; am_devices_spiflash_read &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_disable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_program_main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_page_erase
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_devices_spiflash_read
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_iom_spi_pins_enable
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_iom_spi_pins_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>

<P><STRONG><a name="[33]"></a>image_load_from_internal_flash</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, image_boot_handlers.o(i.image_load_from_internal_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = image_load_from_internal_flash &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_program_main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_page_erase
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_boot_from_storage
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, multi_boot.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = main &rArr; am_bootloader_image_check &rArr; am_bootloader_boot_from_storage &rArr; image_load_from_external_flash &rArr; am_devices_spiflash_read &rArr; am_hal_iom_spi_write &rArr; am_hal_iom_spi_write_nb &rArr; am_hal_iom_fifo_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_ms
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_start
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_load
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_systick_count
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_enable
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_int_clear
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_sysclk_select
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bsp_low_power_init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_image_run
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_image_check
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_ios_interface
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cleanup_ios_interface
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[69]"></a>ser_out</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart_boot_handlers.o(i.ser_out))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[70]"></a>setup_ios_interface</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, ios_boot_handlers.o(i.setup_ios_interface))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = setup_ios_interface &rArr; am_hal_ios_config
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_int_enable
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_int_clear
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_config
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_access_int_enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ios_access_int_clear
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>setup_serial</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, uart_boot_handlers.o(i.setup_serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setup_serial &rArr; am_hal_uart_config
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_enable
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_int_clear
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_fifo_config
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_enable
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_disable
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_config
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_clock_enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[21]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[aa]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[ab]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[60]"></a>image_data_packet_read</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ios_boot_handlers.o(i.image_data_packet_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = image_data_packet_read &rArr; am_bootloader_partial_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_partial_crc32
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_program_main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_acc_isr
</UL>

<P><STRONG><a name="[5f]"></a>image_start_packet_read</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, ios_boot_handlers.o(i.image_start_packet_read))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ioslave_acc_isr
</UL>

<P><STRONG><a name="[68]"></a>image_data_packet_read</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, uart_boot_handlers.o(i.image_data_packet_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = image_data_packet_read &rArr; am_bootloader_partial_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_bootloader_partial_crc32
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_program_main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_page_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[67]"></a>image_start_packet_read</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, uart_boot_handlers.o(i.image_start_packet_read))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
